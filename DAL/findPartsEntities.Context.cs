//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FindPartsEntities : DbContext
    {
        public FindPartsEntities()
            : base("name=FindPartsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<Subscriber> Subscribers { get; set; }
        public virtual DbSet<SubscriberInvoice> SubscriberInvoices { get; set; }
        public virtual DbSet<SubscriberType> SubscriberTypes { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserSearch> UserSearches { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }
        public virtual DbSet<VendorAchievementList> VendorAchievementLists { get; set; }
        public virtual DbSet<VendorAchievementType> VendorAchievementTypes { get; set; }
        public virtual DbSet<VendorCert> VendorCerts { get; set; }
        public virtual DbSet<VendorList> VendorLists { get; set; }
        public virtual DbSet<VendorListItem> VendorListItems { get; set; }
        public virtual DbSet<VendorQuote> VendorQuotes { get; set; }
        public virtual DbSet<VendorSubscriberBlocked> VendorSubscriberBlockeds { get; set; }
        public virtual DbSet<VendorSubscriberPreferred> VendorSubscriberPreferreds { get; set; }
        public virtual DbSet<VendorAchievementListItem> VendorAchievementListItems { get; set; }
        public virtual DbSet<VendorListItemArchive> VendorListItemArchives { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
    
        public virtual ObjectResult<string> ELMAH_GetErrorsXml(string application, Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter totalCount)
        {
            var applicationParameter = application != null ?
                new ObjectParameter("Application", application) :
                new ObjectParameter("Application", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ELMAH_GetErrorsXml", applicationParameter, pageIndexParameter, pageSizeParameter, totalCount);
        }
    
        public virtual ObjectResult<string> ELMAH_GetErrorXml(string application, Nullable<System.Guid> errorId)
        {
            var applicationParameter = application != null ?
                new ObjectParameter("Application", application) :
                new ObjectParameter("Application", typeof(string));
    
            var errorIdParameter = errorId.HasValue ?
                new ObjectParameter("ErrorId", errorId) :
                new ObjectParameter("ErrorId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ELMAH_GetErrorXml", applicationParameter, errorIdParameter);
        }
    
        public virtual int ELMAH_LogError(Nullable<System.Guid> errorId, string application, string host, string type, string source, string message, string user, string allXml, Nullable<int> statusCode, Nullable<System.DateTime> timeUtc)
        {
            var errorIdParameter = errorId.HasValue ?
                new ObjectParameter("ErrorId", errorId) :
                new ObjectParameter("ErrorId", typeof(System.Guid));
    
            var applicationParameter = application != null ?
                new ObjectParameter("Application", application) :
                new ObjectParameter("Application", typeof(string));
    
            var hostParameter = host != null ?
                new ObjectParameter("Host", host) :
                new ObjectParameter("Host", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var userParameter = user != null ?
                new ObjectParameter("User", user) :
                new ObjectParameter("User", typeof(string));
    
            var allXmlParameter = allXml != null ?
                new ObjectParameter("AllXml", allXml) :
                new ObjectParameter("AllXml", typeof(string));
    
            var statusCodeParameter = statusCode.HasValue ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(int));
    
            var timeUtcParameter = timeUtc.HasValue ?
                new ObjectParameter("TimeUtc", timeUtc) :
                new ObjectParameter("TimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ELMAH_LogError", errorIdParameter, applicationParameter, hostParameter, typeParameter, sourceParameter, messageParameter, userParameter, allXmlParameter, statusCodeParameter, timeUtcParameter);
        }
    
        public virtual int ImportExcel(string filename, string sheetname)
        {
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            var sheetnameParameter = sheetname != null ?
                new ObjectParameter("sheetname", sheetname) :
                new ObjectParameter("sheetname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ImportExcel", filenameParameter, sheetnameParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<StatusGetAll_Result> StatusGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StatusGetAll_Result>("StatusGetAll");
        }
    
        public virtual ObjectResult<StatusGetByID_Result> StatusGetByID(Nullable<int> statusID)
        {
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StatusGetByID_Result>("StatusGetByID", statusIDParameter);
        }
    
        public virtual ObjectResult<SubscriberGetAll_Result> SubscriberGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SubscriberGetAll_Result>("SubscriberGetAll");
        }
    
        public virtual ObjectResult<SubscriberGetAll2_Result> SubscriberGetAll2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SubscriberGetAll2_Result>("SubscriberGetAll2");
        }
    
        public virtual ObjectResult<Subscriber> SubscriberGetByID(Nullable<int> subscriberID)
        {
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Subscriber>("SubscriberGetByID", subscriberIDParameter);
        }
    
        public virtual ObjectResult<Subscriber> SubscriberGetByID(Nullable<int> subscriberID, MergeOption mergeOption)
        {
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Subscriber>("SubscriberGetByID", mergeOption, subscriberIDParameter);
        }
    
        public virtual ObjectResult<Subscriber> SubscriberGetByStripeCustomerID(string stripeCustomerID)
        {
            var stripeCustomerIDParameter = stripeCustomerID != null ?
                new ObjectParameter("StripeCustomerID", stripeCustomerID) :
                new ObjectParameter("StripeCustomerID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Subscriber>("SubscriberGetByStripeCustomerID", stripeCustomerIDParameter);
        }
    
        public virtual ObjectResult<Subscriber> SubscriberGetByStripeCustomerID(string stripeCustomerID, MergeOption mergeOption)
        {
            var stripeCustomerIDParameter = stripeCustomerID != null ?
                new ObjectParameter("StripeCustomerID", stripeCustomerID) :
                new ObjectParameter("StripeCustomerID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Subscriber>("SubscriberGetByStripeCustomerID", mergeOption, stripeCustomerIDParameter);
        }
    
        public virtual ObjectResult<SubscriberGetStatsByID_Result> SubscriberGetStatsByID(Nullable<int> subscriberID)
        {
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SubscriberGetStatsByID_Result>("SubscriberGetStatsByID", subscriberIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SubscriberInsert(string subscriberName, string country, string phone)
        {
            var subscriberNameParameter = subscriberName != null ?
                new ObjectParameter("SubscriberName", subscriberName) :
                new ObjectParameter("SubscriberName", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SubscriberInsert", subscriberNameParameter, countryParameter, phoneParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SubscriberInsert2(string subscriberName, string country, string phone, Nullable<int> signupSubscriberTypeID)
        {
            var subscriberNameParameter = subscriberName != null ?
                new ObjectParameter("SubscriberName", subscriberName) :
                new ObjectParameter("SubscriberName", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var signupSubscriberTypeIDParameter = signupSubscriberTypeID.HasValue ?
                new ObjectParameter("SignupSubscriberTypeID", signupSubscriberTypeID) :
                new ObjectParameter("SignupSubscriberTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SubscriberInsert2", subscriberNameParameter, countryParameter, phoneParameter, signupSubscriberTypeIDParameter);
        }
    
        public virtual ObjectResult<SubscriberInvoice> SubscriberInvoiceGetByID(Nullable<int> subscriberInvoiceID)
        {
            var subscriberInvoiceIDParameter = subscriberInvoiceID.HasValue ?
                new ObjectParameter("SubscriberInvoiceID", subscriberInvoiceID) :
                new ObjectParameter("SubscriberInvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SubscriberInvoice>("SubscriberInvoiceGetByID", subscriberInvoiceIDParameter);
        }
    
        public virtual ObjectResult<SubscriberInvoice> SubscriberInvoiceGetByID(Nullable<int> subscriberInvoiceID, MergeOption mergeOption)
        {
            var subscriberInvoiceIDParameter = subscriberInvoiceID.HasValue ?
                new ObjectParameter("SubscriberInvoiceID", subscriberInvoiceID) :
                new ObjectParameter("SubscriberInvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SubscriberInvoice>("SubscriberInvoiceGetByID", mergeOption, subscriberInvoiceIDParameter);
        }
    
        public virtual ObjectResult<SubscriberInvoice> SubscriberInvoiceGetByStripeInvoiceID(string stripeInvoiceID)
        {
            var stripeInvoiceIDParameter = stripeInvoiceID != null ?
                new ObjectParameter("StripeInvoiceID", stripeInvoiceID) :
                new ObjectParameter("StripeInvoiceID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SubscriberInvoice>("SubscriberInvoiceGetByStripeInvoiceID", stripeInvoiceIDParameter);
        }
    
        public virtual ObjectResult<SubscriberInvoice> SubscriberInvoiceGetByStripeInvoiceID(string stripeInvoiceID, MergeOption mergeOption)
        {
            var stripeInvoiceIDParameter = stripeInvoiceID != null ?
                new ObjectParameter("StripeInvoiceID", stripeInvoiceID) :
                new ObjectParameter("StripeInvoiceID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SubscriberInvoice>("SubscriberInvoiceGetByStripeInvoiceID", mergeOption, stripeInvoiceIDParameter);
        }
    
        public virtual ObjectResult<SubscriberInvoice> SubscriberInvoiceGetBySubscriberID(Nullable<int> subscriberID)
        {
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SubscriberInvoice>("SubscriberInvoiceGetBySubscriberID", subscriberIDParameter);
        }
    
        public virtual ObjectResult<SubscriberInvoice> SubscriberInvoiceGetBySubscriberID(Nullable<int> subscriberID, MergeOption mergeOption)
        {
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SubscriberInvoice>("SubscriberInvoiceGetBySubscriberID", mergeOption, subscriberIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SubscriberInvoiceInsert(Nullable<int> subscriberID, string stripeInvoiceID, Nullable<int> amount, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            var stripeInvoiceIDParameter = stripeInvoiceID != null ?
                new ObjectParameter("StripeInvoiceID", stripeInvoiceID) :
                new ObjectParameter("StripeInvoiceID", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SubscriberInvoiceInsert", subscriberIDParameter, stripeInvoiceIDParameter, amountParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int SubscriberInvoiceUpdatePaid(Nullable<int> subscriberInvoiceID)
        {
            var subscriberInvoiceIDParameter = subscriberInvoiceID.HasValue ?
                new ObjectParameter("SubscriberInvoiceID", subscriberInvoiceID) :
                new ObjectParameter("SubscriberInvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SubscriberInvoiceUpdatePaid", subscriberInvoiceIDParameter);
        }
    
        public virtual ObjectResult<SubscriberType> SubscriberTypeGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SubscriberType>("SubscriberTypeGetAll");
        }
    
        public virtual ObjectResult<SubscriberType> SubscriberTypeGetAll(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SubscriberType>("SubscriberTypeGetAll", mergeOption);
        }
    
        public virtual ObjectResult<SubscriberType> SubscriberTypeGetAllStandard()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SubscriberType>("SubscriberTypeGetAllStandard");
        }
    
        public virtual ObjectResult<SubscriberType> SubscriberTypeGetAllStandard(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SubscriberType>("SubscriberTypeGetAllStandard", mergeOption);
        }
    
        public virtual ObjectResult<SubscriberType> SubscriberTypeGetByID(Nullable<int> subscriberTypeID)
        {
            var subscriberTypeIDParameter = subscriberTypeID.HasValue ?
                new ObjectParameter("SubscriberTypeID", subscriberTypeID) :
                new ObjectParameter("SubscriberTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SubscriberType>("SubscriberTypeGetByID", subscriberTypeIDParameter);
        }
    
        public virtual ObjectResult<SubscriberType> SubscriberTypeGetByID(Nullable<int> subscriberTypeID, MergeOption mergeOption)
        {
            var subscriberTypeIDParameter = subscriberTypeID.HasValue ?
                new ObjectParameter("SubscriberTypeID", subscriberTypeID) :
                new ObjectParameter("SubscriberTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SubscriberType>("SubscriberTypeGetByID", mergeOption, subscriberTypeIDParameter);
        }
    
        public virtual int SubscriberUpdate4(Nullable<int> subscriberID, string address1, string address2, string address3, string city, string state, string zipcode, string country, string phone)
        {
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var address3Parameter = address3 != null ?
                new ObjectParameter("Address3", address3) :
                new ObjectParameter("Address3", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipcodeParameter = zipcode != null ?
                new ObjectParameter("Zipcode", zipcode) :
                new ObjectParameter("Zipcode", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SubscriberUpdate4", subscriberIDParameter, address1Parameter, address2Parameter, address3Parameter, cityParameter, stateParameter, zipcodeParameter, countryParameter, phoneParameter);
        }
    
        public virtual int SubscriberUpdatePendingSubscriberType(Nullable<int> subscriberID, Nullable<int> subscriberTypeID)
        {
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            var subscriberTypeIDParameter = subscriberTypeID.HasValue ?
                new ObjectParameter("SubscriberTypeID", subscriberTypeID) :
                new ObjectParameter("SubscriberTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SubscriberUpdatePendingSubscriberType", subscriberIDParameter, subscriberTypeIDParameter);
        }
    
        public virtual int SubscriberUpdateStatus3(Nullable<int> subscriberID, Nullable<int> statusID, Nullable<bool> freeTrial)
        {
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var freeTrialParameter = freeTrial.HasValue ?
                new ObjectParameter("FreeTrial", freeTrial) :
                new ObjectParameter("FreeTrial", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SubscriberUpdateStatus3", subscriberIDParameter, statusIDParameter, freeTrialParameter);
        }
    
        public virtual int SubscriberUpdateStatusAndNotes2(Nullable<int> subscriberID, Nullable<int> statusID, Nullable<bool> freeTrial, string notes)
        {
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var freeTrialParameter = freeTrial.HasValue ?
                new ObjectParameter("FreeTrial", freeTrial) :
                new ObjectParameter("FreeTrial", typeof(bool));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SubscriberUpdateStatusAndNotes2", subscriberIDParameter, statusIDParameter, freeTrialParameter, notesParameter);
        }
    
        public virtual int SubscriberUpdateStatusAndNotes3(Nullable<int> subscriberID, string subscriberName, Nullable<int> statusID, Nullable<bool> freeTrial, string notes)
        {
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            var subscriberNameParameter = subscriberName != null ?
                new ObjectParameter("SubscriberName", subscriberName) :
                new ObjectParameter("SubscriberName", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var freeTrialParameter = freeTrial.HasValue ?
                new ObjectParameter("FreeTrial", freeTrial) :
                new ObjectParameter("FreeTrial", typeof(bool));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SubscriberUpdateStatusAndNotes3", subscriberIDParameter, subscriberNameParameter, statusIDParameter, freeTrialParameter, notesParameter);
        }
    
        public virtual int SubscriberUpdateStripe(Nullable<int> subscriberID, string stripeCustomerID, Nullable<int> subscriberTypeID)
        {
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            var stripeCustomerIDParameter = stripeCustomerID != null ?
                new ObjectParameter("StripeCustomerID", stripeCustomerID) :
                new ObjectParameter("StripeCustomerID", typeof(string));
    
            var subscriberTypeIDParameter = subscriberTypeID.HasValue ?
                new ObjectParameter("SubscriberTypeID", subscriberTypeID) :
                new ObjectParameter("SubscriberTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SubscriberUpdateStripe", subscriberIDParameter, stripeCustomerIDParameter, subscriberTypeIDParameter);
        }
    
        public virtual int SubscriberUpdateSubscriberType(Nullable<int> subscriberID, Nullable<int> subscriberTypeID)
        {
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            var subscriberTypeIDParameter = subscriberTypeID.HasValue ?
                new ObjectParameter("SubscriberTypeID", subscriberTypeID) :
                new ObjectParameter("SubscriberTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SubscriberUpdateSubscriberType", subscriberIDParameter, subscriberTypeIDParameter);
        }
    
        public virtual int UserClearResetPasswordToken(string resetPasswordToken)
        {
            var resetPasswordTokenParameter = resetPasswordToken != null ?
                new ObjectParameter("ResetPasswordToken", resetPasswordToken) :
                new ObjectParameter("ResetPasswordToken", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserClearResetPasswordToken", resetPasswordTokenParameter);
        }
    
        public virtual int UserDelete(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserDelete", userIDParameter);
        }
    
        public virtual int UserGetByEmailPassword(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserGetByEmailPassword", emailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<User> UserGetByID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("UserGetByID", userIDParameter);
        }
    
        public virtual ObjectResult<User> UserGetByID(Nullable<int> userID, MergeOption mergeOption)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("UserGetByID", mergeOption, userIDParameter);
        }
    
        public virtual ObjectResult<UserGetByProviderUserKey2_Result> UserGetByProviderUserKey2(Nullable<System.Guid> providerUserKey)
        {
            var providerUserKeyParameter = providerUserKey.HasValue ?
                new ObjectParameter("ProviderUserKey", providerUserKey) :
                new ObjectParameter("ProviderUserKey", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserGetByProviderUserKey2_Result>("UserGetByProviderUserKey2", providerUserKeyParameter);
        }
    
        public virtual ObjectResult<User> UserGetByResetPasswordToken(string resetPasswordToken)
        {
            var resetPasswordTokenParameter = resetPasswordToken != null ?
                new ObjectParameter("ResetPasswordToken", resetPasswordToken) :
                new ObjectParameter("ResetPasswordToken", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("UserGetByResetPasswordToken", resetPasswordTokenParameter);
        }
    
        public virtual ObjectResult<User> UserGetByResetPasswordToken(string resetPasswordToken, MergeOption mergeOption)
        {
            var resetPasswordTokenParameter = resetPasswordToken != null ?
                new ObjectParameter("ResetPasswordToken", resetPasswordToken) :
                new ObjectParameter("ResetPasswordToken", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("UserGetByResetPasswordToken", mergeOption, resetPasswordTokenParameter);
        }
    
        public virtual ObjectResult<UserGetBySubscriberID_Result> UserGetBySubscriberID(Nullable<int> subscriberID)
        {
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserGetBySubscriberID_Result>("UserGetBySubscriberID", subscriberIDParameter);
        }
    
        public virtual ObjectResult<User> UserGetByVendorID(Nullable<int> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("UserGetByVendorID", vendorIDParameter);
        }
    
        public virtual ObjectResult<User> UserGetByVendorID(Nullable<int> vendorID, MergeOption mergeOption)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("UserGetByVendorID", mergeOption, vendorIDParameter);
        }
    
        public virtual ObjectResult<User> UserGetFirstBySubscriberID(Nullable<int> subscriberID)
        {
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("UserGetFirstBySubscriberID", subscriberIDParameter);
        }
    
        public virtual ObjectResult<User> UserGetFirstBySubscriberID(Nullable<int> subscriberID, MergeOption mergeOption)
        {
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User>("UserGetFirstBySubscriberID", mergeOption, subscriberIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> UserInsert(Nullable<System.Guid> providerUserKey, Nullable<int> subscriberID, Nullable<int> vendorID)
        {
            var providerUserKeyParameter = providerUserKey.HasValue ?
                new ObjectParameter("ProviderUserKey", providerUserKey) :
                new ObjectParameter("ProviderUserKey", typeof(System.Guid));
    
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("UserInsert", providerUserKeyParameter, subscriberIDParameter, vendorIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> UserInsert2(Nullable<System.Guid> providerUserKey, Nullable<int> subscriberID, Nullable<int> vendorID, string email)
        {
            var providerUserKeyParameter = providerUserKey.HasValue ?
                new ObjectParameter("ProviderUserKey", providerUserKey) :
                new ObjectParameter("ProviderUserKey", typeof(System.Guid));
    
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("UserInsert2", providerUserKeyParameter, subscriberIDParameter, vendorIDParameter, emailParameter);
        }
    
        public virtual ObjectResult<UserSearchGetBySubscriberID_Result> UserSearchGetBySubscriberID(Nullable<int> subscriberID)
        {
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserSearchGetBySubscriberID_Result>("UserSearchGetBySubscriberID", subscriberIDParameter);
        }
    
        public virtual ObjectResult<UserSearch> UserSearchGetByUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserSearch>("UserSearchGetByUserID", userIDParameter);
        }
    
        public virtual ObjectResult<UserSearch> UserSearchGetByUserID(Nullable<int> userID, MergeOption mergeOption)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserSearch>("UserSearchGetByUserID", mergeOption, userIDParameter);
        }
    
        public virtual ObjectResult<string> UserSearchGetRecent2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UserSearchGetRecent2");
        }
    
        public virtual ObjectResult<string> UserSearchGetRecent3()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UserSearchGetRecent3");
        }
    
        public virtual ObjectResult<string> UserSearchGetRecentTop()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UserSearchGetRecentTop");
        }
    
        public virtual ObjectResult<string> UserSearchGetTopRecent()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UserSearchGetTopRecent");
        }
    
        public virtual int UserSearchInsert3(Nullable<int> userID, string searchTerm, Nullable<bool> partPage, Nullable<int> resultCount, Nullable<bool> exactMatch)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var searchTermParameter = searchTerm != null ?
                new ObjectParameter("SearchTerm", searchTerm) :
                new ObjectParameter("SearchTerm", typeof(string));
    
            var partPageParameter = partPage.HasValue ?
                new ObjectParameter("PartPage", partPage) :
                new ObjectParameter("PartPage", typeof(bool));
    
            var resultCountParameter = resultCount.HasValue ?
                new ObjectParameter("ResultCount", resultCount) :
                new ObjectParameter("ResultCount", typeof(int));
    
            var exactMatchParameter = exactMatch.HasValue ?
                new ObjectParameter("ExactMatch", exactMatch) :
                new ObjectParameter("ExactMatch", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserSearchInsert3", userIDParameter, searchTermParameter, partPageParameter, resultCountParameter, exactMatchParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> UserUpdate3(Nullable<int> userID, Nullable<System.Guid> providerUserKey, Nullable<int> subscriberID, Nullable<int> vendorID, string email, Nullable<int> createdByUserID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var providerUserKeyParameter = providerUserKey.HasValue ?
                new ObjectParameter("ProviderUserKey", providerUserKey) :
                new ObjectParameter("ProviderUserKey", typeof(System.Guid));
    
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var createdByUserIDParameter = createdByUserID.HasValue ?
                new ObjectParameter("CreatedByUserID", createdByUserID) :
                new ObjectParameter("CreatedByUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("UserUpdate3", userIDParameter, providerUserKeyParameter, subscriberIDParameter, vendorIDParameter, emailParameter, createdByUserIDParameter);
        }
    
        public virtual int UserUpdateDateActivated(Nullable<System.Guid> providerUserKey)
        {
            var providerUserKeyParameter = providerUserKey.HasValue ?
                new ObjectParameter("ProviderUserKey", providerUserKey) :
                new ObjectParameter("ProviderUserKey", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserUpdateDateActivated", providerUserKeyParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UserUpdateResetPassword(string email, string resetPasswordToken)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var resetPasswordTokenParameter = resetPasswordToken != null ?
                new ObjectParameter("ResetPasswordToken", resetPasswordToken) :
                new ObjectParameter("ResetPasswordToken", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UserUpdateResetPassword", emailParameter, resetPasswordTokenParameter);
        }
    
        public virtual int VendorAchievementListDeleteByID(Nullable<int> vendorAchievementListID)
        {
            var vendorAchievementListIDParameter = vendorAchievementListID.HasValue ?
                new ObjectParameter("VendorAchievementListID", vendorAchievementListID) :
                new ObjectParameter("VendorAchievementListID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorAchievementListDeleteByID", vendorAchievementListIDParameter);
        }
    
        public virtual ObjectResult<VendorAchievementList> VendorAchievementListGetByID(Nullable<int> vendorAchievementListID)
        {
            var vendorAchievementListIDParameter = vendorAchievementListID.HasValue ?
                new ObjectParameter("VendorAchievementListID", vendorAchievementListID) :
                new ObjectParameter("VendorAchievementListID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorAchievementList>("VendorAchievementListGetByID", vendorAchievementListIDParameter);
        }
    
        public virtual ObjectResult<VendorAchievementList> VendorAchievementListGetByID(Nullable<int> vendorAchievementListID, MergeOption mergeOption)
        {
            var vendorAchievementListIDParameter = vendorAchievementListID.HasValue ?
                new ObjectParameter("VendorAchievementListID", vendorAchievementListID) :
                new ObjectParameter("VendorAchievementListID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorAchievementList>("VendorAchievementListGetByID", mergeOption, vendorAchievementListIDParameter);
        }
    
        public virtual ObjectResult<VendorAchievementListGetByVendorID_Result> VendorAchievementListGetByVendorID(Nullable<int> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorAchievementListGetByVendorID_Result>("VendorAchievementListGetByVendorID", vendorIDParameter);
        }
    
        public virtual ObjectResult<VendorAchievementListGetByVendorID2_Result> VendorAchievementListGetByVendorID2(Nullable<int> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorAchievementListGetByVendorID2_Result>("VendorAchievementListGetByVendorID2", vendorIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> VendorAchievementListUpdate(Nullable<int> vendorAchievementListID, Nullable<int> vendorID, Nullable<int> vendorAchievementTypeID, string comments, string filetype, Nullable<bool> replaceList)
        {
            var vendorAchievementListIDParameter = vendorAchievementListID.HasValue ?
                new ObjectParameter("VendorAchievementListID", vendorAchievementListID) :
                new ObjectParameter("VendorAchievementListID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var vendorAchievementTypeIDParameter = vendorAchievementTypeID.HasValue ?
                new ObjectParameter("VendorAchievementTypeID", vendorAchievementTypeID) :
                new ObjectParameter("VendorAchievementTypeID", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var filetypeParameter = filetype != null ?
                new ObjectParameter("Filetype", filetype) :
                new ObjectParameter("Filetype", typeof(string));
    
            var replaceListParameter = replaceList.HasValue ?
                new ObjectParameter("ReplaceList", replaceList) :
                new ObjectParameter("ReplaceList", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("VendorAchievementListUpdate", vendorAchievementListIDParameter, vendorIDParameter, vendorAchievementTypeIDParameter, commentsParameter, filetypeParameter, replaceListParameter);
        }
    
        public virtual int VendorAchievementListUpdateDateApproved(Nullable<int> vendorAchievementListID)
        {
            var vendorAchievementListIDParameter = vendorAchievementListID.HasValue ?
                new ObjectParameter("VendorAchievementListID", vendorAchievementListID) :
                new ObjectParameter("VendorAchievementListID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorAchievementListUpdateDateApproved", vendorAchievementListIDParameter);
        }
    
        public virtual ObjectResult<VendorAchievementType> VendorAchievementTypeGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorAchievementType>("VendorAchievementTypeGetAll");
        }
    
        public virtual ObjectResult<VendorAchievementType> VendorAchievementTypeGetAll(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorAchievementType>("VendorAchievementTypeGetAll", mergeOption);
        }
    
        public virtual ObjectResult<VendorAchievementType> VendorAchievementTypeGetAllQuoteSelectable()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorAchievementType>("VendorAchievementTypeGetAllQuoteSelectable");
        }
    
        public virtual ObjectResult<VendorAchievementType> VendorAchievementTypeGetAllQuoteSelectable(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorAchievementType>("VendorAchievementTypeGetAllQuoteSelectable", mergeOption);
        }
    
        public virtual int VendorCertDelete(Nullable<int> vendorCertID)
        {
            var vendorCertIDParameter = vendorCertID.HasValue ?
                new ObjectParameter("VendorCertID", vendorCertID) :
                new ObjectParameter("VendorCertID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorCertDelete", vendorCertIDParameter);
        }
    
        public virtual ObjectResult<VendorCert> VendorCertGetByVendorID(Nullable<int> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorCert>("VendorCertGetByVendorID", vendorIDParameter);
        }
    
        public virtual ObjectResult<VendorCert> VendorCertGetByVendorID(Nullable<int> vendorID, MergeOption mergeOption)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorCert>("VendorCertGetByVendorID", mergeOption, vendorIDParameter);
        }
    
        public virtual int VendorCertInsert(Nullable<int> vendorID, string cert, string number)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var certParameter = cert != null ?
                new ObjectParameter("Cert", cert) :
                new ObjectParameter("Cert", typeof(string));
    
            var numberParameter = number != null ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorCertInsert", vendorIDParameter, certParameter, numberParameter);
        }
    
        public virtual ObjectResult<VendorGetAll_Result> VendorGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorGetAll_Result>("VendorGetAll");
        }
    
        public virtual ObjectResult<Vendor> VendorGetByID(Nullable<int> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vendor>("VendorGetByID", vendorIDParameter);
        }
    
        public virtual ObjectResult<Vendor> VendorGetByID(Nullable<int> vendorID, MergeOption mergeOption)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vendor>("VendorGetByID", mergeOption, vendorIDParameter);
        }
    
        public virtual ObjectResult<Vendor> VendorGetByVendorName(string vendorName)
        {
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vendor>("VendorGetByVendorName", vendorNameParameter);
        }
    
        public virtual ObjectResult<Vendor> VendorGetByVendorName(string vendorName, MergeOption mergeOption)
        {
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vendor>("VendorGetByVendorName", mergeOption, vendorNameParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> VendorInsert4(string vendorName, string country, string phone, string rFQPhone, string rFQEmail, string rFQWebEmails)
        {
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var rFQPhoneParameter = rFQPhone != null ?
                new ObjectParameter("RFQPhone", rFQPhone) :
                new ObjectParameter("RFQPhone", typeof(string));
    
            var rFQEmailParameter = rFQEmail != null ?
                new ObjectParameter("RFQEmail", rFQEmail) :
                new ObjectParameter("RFQEmail", typeof(string));
    
            var rFQWebEmailsParameter = rFQWebEmails != null ?
                new ObjectParameter("RFQWebEmails", rFQWebEmails) :
                new ObjectParameter("RFQWebEmails", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("VendorInsert4", vendorNameParameter, countryParameter, phoneParameter, rFQPhoneParameter, rFQEmailParameter, rFQWebEmailsParameter);
        }
    
        public virtual int VendorListDeleteByID(Nullable<int> vendorListID)
        {
            var vendorListIDParameter = vendorListID.HasValue ?
                new ObjectParameter("VendorListID", vendorListID) :
                new ObjectParameter("VendorListID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorListDeleteByID", vendorListIDParameter);
        }
    
        public virtual ObjectResult<VendorList> VendorListGetByID(Nullable<int> vendorListID)
        {
            var vendorListIDParameter = vendorListID.HasValue ?
                new ObjectParameter("VendorListID", vendorListID) :
                new ObjectParameter("VendorListID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorList>("VendorListGetByID", vendorListIDParameter);
        }
    
        public virtual ObjectResult<VendorList> VendorListGetByID(Nullable<int> vendorListID, MergeOption mergeOption)
        {
            var vendorListIDParameter = vendorListID.HasValue ?
                new ObjectParameter("VendorListID", vendorListID) :
                new ObjectParameter("VendorListID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorList>("VendorListGetByID", mergeOption, vendorListIDParameter);
        }
    
        public virtual ObjectResult<VendorListGetByVendorID_Result> VendorListGetByVendorID(Nullable<int> vendorID, Nullable<int> portalCode)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var portalCodeParameter = portalCode.HasValue ?
                new ObjectParameter("PortalCode", portalCode) :
                new ObjectParameter("PortalCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorListGetByVendorID_Result>("VendorListGetByVendorID", vendorIDParameter, portalCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> VendorListInsert(Nullable<int> vendorID, string comments, string filetype, Nullable<bool> replaceList)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var filetypeParameter = filetype != null ?
                new ObjectParameter("Filetype", filetype) :
                new ObjectParameter("Filetype", typeof(string));
    
            var replaceListParameter = replaceList.HasValue ?
                new ObjectParameter("ReplaceList", replaceList) :
                new ObjectParameter("ReplaceList", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("VendorListInsert", vendorIDParameter, commentsParameter, filetypeParameter, replaceListParameter);
        }
    
        public virtual int VendorListItemArchiveByVendorIDAndNotEqualVendorListID(Nullable<int> vendorID, Nullable<int> vendorListID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var vendorListIDParameter = vendorListID.HasValue ?
                new ObjectParameter("VendorListID", vendorListID) :
                new ObjectParameter("VendorListID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorListItemArchiveByVendorIDAndNotEqualVendorListID", vendorIDParameter, vendorListIDParameter);
        }
    
        public virtual int VendorListItemArchiveByVendorIDAndNotEqualVendorListID2(Nullable<int> vendorID, Nullable<int> vendorListID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var vendorListIDParameter = vendorListID.HasValue ?
                new ObjectParameter("VendorListID", vendorListID) :
                new ObjectParameter("VendorListID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorListItemArchiveByVendorIDAndNotEqualVendorListID2", vendorIDParameter, vendorListIDParameter);
        }
    
        public virtual int VendorListItemArchiveDuplicatesByVendorIDAndNotEqualVendorListID(Nullable<int> vendorID, Nullable<int> vendorListID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var vendorListIDParameter = vendorListID.HasValue ?
                new ObjectParameter("VendorListID", vendorListID) :
                new ObjectParameter("VendorListID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorListItemArchiveDuplicatesByVendorIDAndNotEqualVendorListID", vendorIDParameter, vendorListIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> VendorListItemArchiveDuplicatesByVendorIDAndNotEqualVendorListID2(Nullable<int> vendorID, Nullable<int> vendorListID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var vendorListIDParameter = vendorListID.HasValue ?
                new ObjectParameter("VendorListID", vendorListID) :
                new ObjectParameter("VendorListID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("VendorListItemArchiveDuplicatesByVendorIDAndNotEqualVendorListID2", vendorIDParameter, vendorListIDParameter);
        }
    
        public virtual int VendorListItemGetByVendor2(Nullable<int> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorListItemGetByVendor2", vendorIDParameter);
        }
    
        public virtual int VendorListItemGetByVendor3(Nullable<int> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorListItemGetByVendor3", vendorIDParameter);
        }
    
        public virtual ObjectResult<VendorListItemGetByVendor4_Result> VendorListItemGetByVendor4(Nullable<int> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorListItemGetByVendor4_Result>("VendorListItemGetByVendor4", vendorIDParameter);
        }
    
        public virtual ObjectResult<VendorListItemGetStats_Result> VendorListItemGetStats(Nullable<int> portalCode)
        {
            var portalCodeParameter = portalCode.HasValue ?
                new ObjectParameter("PortalCode", portalCode) :
                new ObjectParameter("PortalCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorListItemGetStats_Result>("VendorListItemGetStats", portalCodeParameter);
        }
    
        public virtual ObjectResult<string> VendorListItemGetTopWithAchievements()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("VendorListItemGetTopWithAchievements");
        }
    
        public virtual int VendorListItemQuoteGetByVendorQuoteID(Nullable<int> vendorQuoteID)
        {
            var vendorQuoteIDParameter = vendorQuoteID.HasValue ?
                new ObjectParameter("VendorQuoteID", vendorQuoteID) :
                new ObjectParameter("VendorQuoteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorListItemQuoteGetByVendorQuoteID", vendorQuoteIDParameter);
        }
    
        public virtual int VendorListItemQuoteInsert(Nullable<int> vendorQuoteID, Nullable<int> vendorListItemID)
        {
            var vendorQuoteIDParameter = vendorQuoteID.HasValue ?
                new ObjectParameter("VendorQuoteID", vendorQuoteID) :
                new ObjectParameter("VendorQuoteID", typeof(int));
    
            var vendorListItemIDParameter = vendorListItemID.HasValue ?
                new ObjectParameter("VendorListItemID", vendorListItemID) :
                new ObjectParameter("VendorListItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorListItemQuoteInsert", vendorQuoteIDParameter, vendorListItemIDParameter);
        }
    
        public virtual ObjectResult<VendorListItemSearch7_Result> VendorListItemSearch7(string searchTerm, Nullable<int> subscriberID, Nullable<bool> exactMatch, Nullable<int> portalCode)
        {
            var searchTermParameter = searchTerm != null ?
                new ObjectParameter("SearchTerm", searchTerm) :
                new ObjectParameter("SearchTerm", typeof(string));
    
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            var exactMatchParameter = exactMatch.HasValue ?
                new ObjectParameter("ExactMatch", exactMatch) :
                new ObjectParameter("ExactMatch", typeof(bool));
    
            var portalCodeParameter = portalCode.HasValue ?
                new ObjectParameter("PortalCode", portalCode) :
                new ObjectParameter("PortalCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorListItemSearch7_Result>("VendorListItemSearch7", searchTermParameter, subscriberIDParameter, exactMatchParameter, portalCodeParameter);
        }
    
        public virtual ObjectResult<VendorListItemSearchAlternateDetail_Result> VendorListItemSearchAlternateDetail(string partNumber, Nullable<int> subscriberID)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorListItemSearchAlternateDetail_Result>("VendorListItemSearchAlternateDetail", partNumberParameter, subscriberIDParameter);
        }
    
        public virtual int VendorListItemSearchDetail6(string partNumber, Nullable<int> subscriberID)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorListItemSearchDetail6", partNumberParameter, subscriberIDParameter);
        }
    
        public virtual int VendorListItemSearchDetail7(string partNumber, Nullable<int> subscriberID)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorListItemSearchDetail7", partNumberParameter, subscriberIDParameter);
        }
    
        public virtual int VendorListItemSearchDetail8(string partNumber, Nullable<int> subscriberID)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorListItemSearchDetail8", partNumberParameter, subscriberIDParameter);
        }
    
        public virtual ObjectResult<VendorListItemSearchDetail9_Result> VendorListItemSearchDetail9(string partNumber, Nullable<int> subscriberID, Nullable<int> portalCode)
        {
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            var portalCodeParameter = portalCode.HasValue ?
                new ObjectParameter("PortalCode", portalCode) :
                new ObjectParameter("PortalCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorListItemSearchDetail9_Result>("VendorListItemSearchDetail9", partNumberParameter, subscriberIDParameter, portalCodeParameter);
        }
    
        public virtual ObjectResult<VendorListItemSearchSimilar_Result> VendorListItemSearchSimilar(string searchTerm, Nullable<int> subscriberID, Nullable<int> portalCode)
        {
            var searchTermParameter = searchTerm != null ?
                new ObjectParameter("SearchTerm", searchTerm) :
                new ObjectParameter("SearchTerm", typeof(string));
    
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            var portalCodeParameter = portalCode.HasValue ?
                new ObjectParameter("PortalCode", portalCode) :
                new ObjectParameter("PortalCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorListItemSearchSimilar_Result>("VendorListItemSearchSimilar", searchTermParameter, subscriberIDParameter, portalCodeParameter);
        }
    
        public virtual int VendorListItemUpdateAchievements2(Nullable<int> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorListItemUpdateAchievements2", vendorIDParameter);
        }
    
        public virtual int VendorListItemUpdateAchievements3(Nullable<int> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorListItemUpdateAchievements3", vendorIDParameter);
        }
    
        public virtual int VendorListItemUpdateAchievements4(Nullable<int> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorListItemUpdateAchievements4", vendorIDParameter);
        }
    
        public virtual int VendorListItemUpdateClean()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorListItemUpdateClean");
        }
    
        public virtual int VendorListItemUpdateQuoteAchievements(Nullable<int> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorListItemUpdateQuoteAchievements", vendorIDParameter);
        }
    
        public virtual int VendorListItemUpdateQuoteAchievements2(Nullable<int> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorListItemUpdateQuoteAchievements2", vendorIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> VendorListUpdate2(Nullable<int> vendorListID, Nullable<int> userID, Nullable<int> vendorID, string comments, string filetype, Nullable<bool> replaceList, Nullable<int> portalCode)
        {
            var vendorListIDParameter = vendorListID.HasValue ?
                new ObjectParameter("VendorListID", vendorListID) :
                new ObjectParameter("VendorListID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var filetypeParameter = filetype != null ?
                new ObjectParameter("Filetype", filetype) :
                new ObjectParameter("Filetype", typeof(string));
    
            var replaceListParameter = replaceList.HasValue ?
                new ObjectParameter("ReplaceList", replaceList) :
                new ObjectParameter("ReplaceList", typeof(bool));
    
            var portalCodeParameter = portalCode.HasValue ?
                new ObjectParameter("PortalCode", portalCode) :
                new ObjectParameter("PortalCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("VendorListUpdate2", vendorListIDParameter, userIDParameter, vendorIDParameter, commentsParameter, filetypeParameter, replaceListParameter, portalCodeParameter);
        }
    
        public virtual int VendorListUpdateDateApproved(Nullable<int> vendorListID)
        {
            var vendorListIDParameter = vendorListID.HasValue ?
                new ObjectParameter("VendorListID", vendorListID) :
                new ObjectParameter("VendorListID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorListUpdateDateApproved", vendorListIDParameter);
        }
    
        public virtual int VendorQuoteGetByID2(Nullable<int> vendorQuoteID)
        {
            var vendorQuoteIDParameter = vendorQuoteID.HasValue ?
                new ObjectParameter("VendorQuoteID", vendorQuoteID) :
                new ObjectParameter("VendorQuoteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorQuoteGetByID2", vendorQuoteIDParameter);
        }
    
        public virtual int VendorQuoteGetByID3(Nullable<int> vendorQuoteID)
        {
            var vendorQuoteIDParameter = vendorQuoteID.HasValue ?
                new ObjectParameter("VendorQuoteID", vendorQuoteID) :
                new ObjectParameter("VendorQuoteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorQuoteGetByID3", vendorQuoteIDParameter);
        }
    
        public virtual ObjectResult<VendorQuoteGetByID4_Result> VendorQuoteGetByID4(Nullable<int> vendorQuoteID)
        {
            var vendorQuoteIDParameter = vendorQuoteID.HasValue ?
                new ObjectParameter("VendorQuoteID", vendorQuoteID) :
                new ObjectParameter("VendorQuoteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorQuoteGetByID4_Result>("VendorQuoteGetByID4", vendorQuoteIDParameter);
        }
    
        public virtual ObjectResult<VendorQuoteGetByUserID_Result> VendorQuoteGetByUserID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorQuoteGetByUserID_Result>("VendorQuoteGetByUserID", userIDParameter);
        }
    
        public virtual int VendorQuoteGetByVendorID3(Nullable<int> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorQuoteGetByVendorID3", vendorIDParameter);
        }
    
        public virtual int VendorQuoteGetByVendorID4(Nullable<int> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorQuoteGetByVendorID4", vendorIDParameter);
        }
    
        public virtual int VendorQuoteGetByVendorID5(Nullable<int> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorQuoteGetByVendorID5", vendorIDParameter);
        }
    
        public virtual ObjectResult<VendorQuoteGetByVendorID6_Result> VendorQuoteGetByVendorID6(Nullable<int> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorQuoteGetByVendorID6_Result>("VendorQuoteGetByVendorID6", vendorIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> VendorQuoteInsert3(Nullable<int> vendorID, Nullable<int> vendorListItemID, Nullable<int> userID, string comments, string rFQID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var vendorListItemIDParameter = vendorListItemID.HasValue ?
                new ObjectParameter("VendorListItemID", vendorListItemID) :
                new ObjectParameter("VendorListItemID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var rFQIDParameter = rFQID != null ?
                new ObjectParameter("RFQID", rFQID) :
                new ObjectParameter("RFQID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("VendorQuoteInsert3", vendorIDParameter, vendorListItemIDParameter, userIDParameter, commentsParameter, rFQIDParameter);
        }
    
        public virtual int VendorQuoteUpdate2(Nullable<int> vendorQuoteID, Nullable<int> vendorID, Nullable<bool> flatRate, Nullable<int> testPrice, Nullable<int> testTAT, Nullable<int> repairPrice, Nullable<int> repairPriceRange, Nullable<int> repairTAT, Nullable<int> overhaulPrice, Nullable<int> overhaulPriceRange, Nullable<int> overhaulTAT, Nullable<int> notToExceed, Nullable<bool> partExpert, Nullable<bool> pMA, Nullable<bool> dER, Nullable<bool> freeEval, Nullable<bool> modified, Nullable<bool> functionTestOnly, Nullable<bool> noOverhaulWorkscope, string quoteComments)
        {
            var vendorQuoteIDParameter = vendorQuoteID.HasValue ?
                new ObjectParameter("VendorQuoteID", vendorQuoteID) :
                new ObjectParameter("VendorQuoteID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var flatRateParameter = flatRate.HasValue ?
                new ObjectParameter("FlatRate", flatRate) :
                new ObjectParameter("FlatRate", typeof(bool));
    
            var testPriceParameter = testPrice.HasValue ?
                new ObjectParameter("TestPrice", testPrice) :
                new ObjectParameter("TestPrice", typeof(int));
    
            var testTATParameter = testTAT.HasValue ?
                new ObjectParameter("TestTAT", testTAT) :
                new ObjectParameter("TestTAT", typeof(int));
    
            var repairPriceParameter = repairPrice.HasValue ?
                new ObjectParameter("RepairPrice", repairPrice) :
                new ObjectParameter("RepairPrice", typeof(int));
    
            var repairPriceRangeParameter = repairPriceRange.HasValue ?
                new ObjectParameter("RepairPriceRange", repairPriceRange) :
                new ObjectParameter("RepairPriceRange", typeof(int));
    
            var repairTATParameter = repairTAT.HasValue ?
                new ObjectParameter("RepairTAT", repairTAT) :
                new ObjectParameter("RepairTAT", typeof(int));
    
            var overhaulPriceParameter = overhaulPrice.HasValue ?
                new ObjectParameter("OverhaulPrice", overhaulPrice) :
                new ObjectParameter("OverhaulPrice", typeof(int));
    
            var overhaulPriceRangeParameter = overhaulPriceRange.HasValue ?
                new ObjectParameter("OverhaulPriceRange", overhaulPriceRange) :
                new ObjectParameter("OverhaulPriceRange", typeof(int));
    
            var overhaulTATParameter = overhaulTAT.HasValue ?
                new ObjectParameter("OverhaulTAT", overhaulTAT) :
                new ObjectParameter("OverhaulTAT", typeof(int));
    
            var notToExceedParameter = notToExceed.HasValue ?
                new ObjectParameter("NotToExceed", notToExceed) :
                new ObjectParameter("NotToExceed", typeof(int));
    
            var partExpertParameter = partExpert.HasValue ?
                new ObjectParameter("PartExpert", partExpert) :
                new ObjectParameter("PartExpert", typeof(bool));
    
            var pMAParameter = pMA.HasValue ?
                new ObjectParameter("PMA", pMA) :
                new ObjectParameter("PMA", typeof(bool));
    
            var dERParameter = dER.HasValue ?
                new ObjectParameter("DER", dER) :
                new ObjectParameter("DER", typeof(bool));
    
            var freeEvalParameter = freeEval.HasValue ?
                new ObjectParameter("FreeEval", freeEval) :
                new ObjectParameter("FreeEval", typeof(bool));
    
            var modifiedParameter = modified.HasValue ?
                new ObjectParameter("Modified", modified) :
                new ObjectParameter("Modified", typeof(bool));
    
            var functionTestOnlyParameter = functionTestOnly.HasValue ?
                new ObjectParameter("FunctionTestOnly", functionTestOnly) :
                new ObjectParameter("FunctionTestOnly", typeof(bool));
    
            var noOverhaulWorkscopeParameter = noOverhaulWorkscope.HasValue ?
                new ObjectParameter("NoOverhaulWorkscope", noOverhaulWorkscope) :
                new ObjectParameter("NoOverhaulWorkscope", typeof(bool));
    
            var quoteCommentsParameter = quoteComments != null ?
                new ObjectParameter("QuoteComments", quoteComments) :
                new ObjectParameter("QuoteComments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorQuoteUpdate2", vendorQuoteIDParameter, vendorIDParameter, flatRateParameter, testPriceParameter, testTATParameter, repairPriceParameter, repairPriceRangeParameter, repairTATParameter, overhaulPriceParameter, overhaulPriceRangeParameter, overhaulTATParameter, notToExceedParameter, partExpertParameter, pMAParameter, dERParameter, freeEvalParameter, modifiedParameter, functionTestOnlyParameter, noOverhaulWorkscopeParameter, quoteCommentsParameter);
        }
    
        public virtual int VendorQuoteUpdate3(Nullable<int> vendorQuoteID, Nullable<int> vendorID, string currency, Nullable<int> testPrice, Nullable<int> testTAT, Nullable<int> repairPrice, Nullable<int> repairPriceRangeLow, Nullable<int> repairPriceRangeHigh, Nullable<int> repairTAT, Nullable<int> overhaulPrice, Nullable<int> overhaulPriceRangeLow, Nullable<int> overhaulPriceRangeHigh, Nullable<int> overhaulTAT, Nullable<int> notToExceed, Nullable<bool> partExpert, Nullable<bool> pMA, Nullable<bool> dER, Nullable<bool> freeEval, Nullable<bool> modified, Nullable<bool> functionTestOnly, Nullable<bool> noOverhaulWorkscope, Nullable<bool> cAAC, Nullable<bool> extendedWarranty, Nullable<bool> flatRate, Nullable<bool> range, Nullable<bool> nTE, string quoteComments)
        {
            var vendorQuoteIDParameter = vendorQuoteID.HasValue ?
                new ObjectParameter("VendorQuoteID", vendorQuoteID) :
                new ObjectParameter("VendorQuoteID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var testPriceParameter = testPrice.HasValue ?
                new ObjectParameter("TestPrice", testPrice) :
                new ObjectParameter("TestPrice", typeof(int));
    
            var testTATParameter = testTAT.HasValue ?
                new ObjectParameter("TestTAT", testTAT) :
                new ObjectParameter("TestTAT", typeof(int));
    
            var repairPriceParameter = repairPrice.HasValue ?
                new ObjectParameter("RepairPrice", repairPrice) :
                new ObjectParameter("RepairPrice", typeof(int));
    
            var repairPriceRangeLowParameter = repairPriceRangeLow.HasValue ?
                new ObjectParameter("RepairPriceRangeLow", repairPriceRangeLow) :
                new ObjectParameter("RepairPriceRangeLow", typeof(int));
    
            var repairPriceRangeHighParameter = repairPriceRangeHigh.HasValue ?
                new ObjectParameter("RepairPriceRangeHigh", repairPriceRangeHigh) :
                new ObjectParameter("RepairPriceRangeHigh", typeof(int));
    
            var repairTATParameter = repairTAT.HasValue ?
                new ObjectParameter("RepairTAT", repairTAT) :
                new ObjectParameter("RepairTAT", typeof(int));
    
            var overhaulPriceParameter = overhaulPrice.HasValue ?
                new ObjectParameter("OverhaulPrice", overhaulPrice) :
                new ObjectParameter("OverhaulPrice", typeof(int));
    
            var overhaulPriceRangeLowParameter = overhaulPriceRangeLow.HasValue ?
                new ObjectParameter("OverhaulPriceRangeLow", overhaulPriceRangeLow) :
                new ObjectParameter("OverhaulPriceRangeLow", typeof(int));
    
            var overhaulPriceRangeHighParameter = overhaulPriceRangeHigh.HasValue ?
                new ObjectParameter("OverhaulPriceRangeHigh", overhaulPriceRangeHigh) :
                new ObjectParameter("OverhaulPriceRangeHigh", typeof(int));
    
            var overhaulTATParameter = overhaulTAT.HasValue ?
                new ObjectParameter("OverhaulTAT", overhaulTAT) :
                new ObjectParameter("OverhaulTAT", typeof(int));
    
            var notToExceedParameter = notToExceed.HasValue ?
                new ObjectParameter("NotToExceed", notToExceed) :
                new ObjectParameter("NotToExceed", typeof(int));
    
            var partExpertParameter = partExpert.HasValue ?
                new ObjectParameter("PartExpert", partExpert) :
                new ObjectParameter("PartExpert", typeof(bool));
    
            var pMAParameter = pMA.HasValue ?
                new ObjectParameter("PMA", pMA) :
                new ObjectParameter("PMA", typeof(bool));
    
            var dERParameter = dER.HasValue ?
                new ObjectParameter("DER", dER) :
                new ObjectParameter("DER", typeof(bool));
    
            var freeEvalParameter = freeEval.HasValue ?
                new ObjectParameter("FreeEval", freeEval) :
                new ObjectParameter("FreeEval", typeof(bool));
    
            var modifiedParameter = modified.HasValue ?
                new ObjectParameter("Modified", modified) :
                new ObjectParameter("Modified", typeof(bool));
    
            var functionTestOnlyParameter = functionTestOnly.HasValue ?
                new ObjectParameter("FunctionTestOnly", functionTestOnly) :
                new ObjectParameter("FunctionTestOnly", typeof(bool));
    
            var noOverhaulWorkscopeParameter = noOverhaulWorkscope.HasValue ?
                new ObjectParameter("NoOverhaulWorkscope", noOverhaulWorkscope) :
                new ObjectParameter("NoOverhaulWorkscope", typeof(bool));
    
            var cAACParameter = cAAC.HasValue ?
                new ObjectParameter("CAAC", cAAC) :
                new ObjectParameter("CAAC", typeof(bool));
    
            var extendedWarrantyParameter = extendedWarranty.HasValue ?
                new ObjectParameter("ExtendedWarranty", extendedWarranty) :
                new ObjectParameter("ExtendedWarranty", typeof(bool));
    
            var flatRateParameter = flatRate.HasValue ?
                new ObjectParameter("FlatRate", flatRate) :
                new ObjectParameter("FlatRate", typeof(bool));
    
            var rangeParameter = range.HasValue ?
                new ObjectParameter("Range", range) :
                new ObjectParameter("Range", typeof(bool));
    
            var nTEParameter = nTE.HasValue ?
                new ObjectParameter("NTE", nTE) :
                new ObjectParameter("NTE", typeof(bool));
    
            var quoteCommentsParameter = quoteComments != null ?
                new ObjectParameter("QuoteComments", quoteComments) :
                new ObjectParameter("QuoteComments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorQuoteUpdate3", vendorQuoteIDParameter, vendorIDParameter, currencyParameter, testPriceParameter, testTATParameter, repairPriceParameter, repairPriceRangeLowParameter, repairPriceRangeHighParameter, repairTATParameter, overhaulPriceParameter, overhaulPriceRangeLowParameter, overhaulPriceRangeHighParameter, overhaulTATParameter, notToExceedParameter, partExpertParameter, pMAParameter, dERParameter, freeEvalParameter, modifiedParameter, functionTestOnlyParameter, noOverhaulWorkscopeParameter, cAACParameter, extendedWarrantyParameter, flatRateParameter, rangeParameter, nTEParameter, quoteCommentsParameter);
        }
    
        public virtual int VendorQuoteUpdate4(Nullable<int> vendorQuoteID, Nullable<int> vendorID, string currency, Nullable<int> testPrice, Nullable<int> testTAT, Nullable<int> repairPrice, Nullable<int> repairPriceRangeLow, Nullable<int> repairPriceRangeHigh, Nullable<int> repairTAT, Nullable<int> overhaulPrice, Nullable<int> overhaulPriceRangeLow, Nullable<int> overhaulPriceRangeHigh, Nullable<int> overhaulTAT, Nullable<int> notToExceed, Nullable<bool> repairsFrequently, Nullable<bool> pMA, Nullable<bool> dER, Nullable<bool> freeEval, Nullable<bool> modified, Nullable<bool> functionTestOnly, Nullable<bool> noOverhaulWorkscope, Nullable<bool> cAAC, Nullable<bool> extendedWarranty, Nullable<bool> flatRate, Nullable<bool> range, Nullable<bool> nTE, string quoteComments)
        {
            var vendorQuoteIDParameter = vendorQuoteID.HasValue ?
                new ObjectParameter("VendorQuoteID", vendorQuoteID) :
                new ObjectParameter("VendorQuoteID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            var testPriceParameter = testPrice.HasValue ?
                new ObjectParameter("TestPrice", testPrice) :
                new ObjectParameter("TestPrice", typeof(int));
    
            var testTATParameter = testTAT.HasValue ?
                new ObjectParameter("TestTAT", testTAT) :
                new ObjectParameter("TestTAT", typeof(int));
    
            var repairPriceParameter = repairPrice.HasValue ?
                new ObjectParameter("RepairPrice", repairPrice) :
                new ObjectParameter("RepairPrice", typeof(int));
    
            var repairPriceRangeLowParameter = repairPriceRangeLow.HasValue ?
                new ObjectParameter("RepairPriceRangeLow", repairPriceRangeLow) :
                new ObjectParameter("RepairPriceRangeLow", typeof(int));
    
            var repairPriceRangeHighParameter = repairPriceRangeHigh.HasValue ?
                new ObjectParameter("RepairPriceRangeHigh", repairPriceRangeHigh) :
                new ObjectParameter("RepairPriceRangeHigh", typeof(int));
    
            var repairTATParameter = repairTAT.HasValue ?
                new ObjectParameter("RepairTAT", repairTAT) :
                new ObjectParameter("RepairTAT", typeof(int));
    
            var overhaulPriceParameter = overhaulPrice.HasValue ?
                new ObjectParameter("OverhaulPrice", overhaulPrice) :
                new ObjectParameter("OverhaulPrice", typeof(int));
    
            var overhaulPriceRangeLowParameter = overhaulPriceRangeLow.HasValue ?
                new ObjectParameter("OverhaulPriceRangeLow", overhaulPriceRangeLow) :
                new ObjectParameter("OverhaulPriceRangeLow", typeof(int));
    
            var overhaulPriceRangeHighParameter = overhaulPriceRangeHigh.HasValue ?
                new ObjectParameter("OverhaulPriceRangeHigh", overhaulPriceRangeHigh) :
                new ObjectParameter("OverhaulPriceRangeHigh", typeof(int));
    
            var overhaulTATParameter = overhaulTAT.HasValue ?
                new ObjectParameter("OverhaulTAT", overhaulTAT) :
                new ObjectParameter("OverhaulTAT", typeof(int));
    
            var notToExceedParameter = notToExceed.HasValue ?
                new ObjectParameter("NotToExceed", notToExceed) :
                new ObjectParameter("NotToExceed", typeof(int));
    
            var repairsFrequentlyParameter = repairsFrequently.HasValue ?
                new ObjectParameter("RepairsFrequently", repairsFrequently) :
                new ObjectParameter("RepairsFrequently", typeof(bool));
    
            var pMAParameter = pMA.HasValue ?
                new ObjectParameter("PMA", pMA) :
                new ObjectParameter("PMA", typeof(bool));
    
            var dERParameter = dER.HasValue ?
                new ObjectParameter("DER", dER) :
                new ObjectParameter("DER", typeof(bool));
    
            var freeEvalParameter = freeEval.HasValue ?
                new ObjectParameter("FreeEval", freeEval) :
                new ObjectParameter("FreeEval", typeof(bool));
    
            var modifiedParameter = modified.HasValue ?
                new ObjectParameter("Modified", modified) :
                new ObjectParameter("Modified", typeof(bool));
    
            var functionTestOnlyParameter = functionTestOnly.HasValue ?
                new ObjectParameter("FunctionTestOnly", functionTestOnly) :
                new ObjectParameter("FunctionTestOnly", typeof(bool));
    
            var noOverhaulWorkscopeParameter = noOverhaulWorkscope.HasValue ?
                new ObjectParameter("NoOverhaulWorkscope", noOverhaulWorkscope) :
                new ObjectParameter("NoOverhaulWorkscope", typeof(bool));
    
            var cAACParameter = cAAC.HasValue ?
                new ObjectParameter("CAAC", cAAC) :
                new ObjectParameter("CAAC", typeof(bool));
    
            var extendedWarrantyParameter = extendedWarranty.HasValue ?
                new ObjectParameter("ExtendedWarranty", extendedWarranty) :
                new ObjectParameter("ExtendedWarranty", typeof(bool));
    
            var flatRateParameter = flatRate.HasValue ?
                new ObjectParameter("FlatRate", flatRate) :
                new ObjectParameter("FlatRate", typeof(bool));
    
            var rangeParameter = range.HasValue ?
                new ObjectParameter("Range", range) :
                new ObjectParameter("Range", typeof(bool));
    
            var nTEParameter = nTE.HasValue ?
                new ObjectParameter("NTE", nTE) :
                new ObjectParameter("NTE", typeof(bool));
    
            var quoteCommentsParameter = quoteComments != null ?
                new ObjectParameter("QuoteComments", quoteComments) :
                new ObjectParameter("QuoteComments", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorQuoteUpdate4", vendorQuoteIDParameter, vendorIDParameter, currencyParameter, testPriceParameter, testTATParameter, repairPriceParameter, repairPriceRangeLowParameter, repairPriceRangeHighParameter, repairTATParameter, overhaulPriceParameter, overhaulPriceRangeLowParameter, overhaulPriceRangeHighParameter, overhaulTATParameter, notToExceedParameter, repairsFrequentlyParameter, pMAParameter, dERParameter, freeEvalParameter, modifiedParameter, functionTestOnlyParameter, noOverhaulWorkscopeParameter, cAACParameter, extendedWarrantyParameter, flatRateParameter, rangeParameter, nTEParameter, quoteCommentsParameter);
        }
    
        public virtual int VendorQuoteUpdateIgnore(Nullable<int> vendorQuoteID, Nullable<int> vendorID)
        {
            var vendorQuoteIDParameter = vendorQuoteID.HasValue ?
                new ObjectParameter("VendorQuoteID", vendorQuoteID) :
                new ObjectParameter("VendorQuoteID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorQuoteUpdateIgnore", vendorQuoteIDParameter, vendorIDParameter);
        }
    
        public virtual int VendorQuoteUpdateNoQuote(Nullable<int> vendorQuoteID, Nullable<int> vendorID)
        {
            var vendorQuoteIDParameter = vendorQuoteID.HasValue ?
                new ObjectParameter("VendorQuoteID", vendorQuoteID) :
                new ObjectParameter("VendorQuoteID", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorQuoteUpdateNoQuote", vendorQuoteIDParameter, vendorIDParameter);
        }
    
        public virtual int VendorSubscriberBlockedDelete(Nullable<int> vendorID, Nullable<int> subscriberID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorSubscriberBlockedDelete", vendorIDParameter, subscriberIDParameter);
        }
    
        public virtual ObjectResult<VendorSubscriberBlockedGetBySubscriberID_Result> VendorSubscriberBlockedGetBySubscriberID(Nullable<int> subscriberID)
        {
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorSubscriberBlockedGetBySubscriberID_Result>("VendorSubscriberBlockedGetBySubscriberID", subscriberIDParameter);
        }
    
        public virtual int VendorSubscriberBlockedInsert(Nullable<int> vendorID, Nullable<int> subscriberID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorSubscriberBlockedInsert", vendorIDParameter, subscriberIDParameter);
        }
    
        public virtual int VendorSubscriberPreferredDelete(Nullable<int> vendorID, Nullable<int> subscriberID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorSubscriberPreferredDelete", vendorIDParameter, subscriberIDParameter);
        }
    
        public virtual ObjectResult<VendorSubscriberPreferredGetBySubscriberID_Result> VendorSubscriberPreferredGetBySubscriberID(Nullable<int> subscriberID)
        {
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VendorSubscriberPreferredGetBySubscriberID_Result>("VendorSubscriberPreferredGetBySubscriberID", subscriberIDParameter);
        }
    
        public virtual int VendorSubscriberPreferredInsert(Nullable<int> vendorID, Nullable<int> subscriberID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var subscriberIDParameter = subscriberID.HasValue ?
                new ObjectParameter("SubscriberID", subscriberID) :
                new ObjectParameter("SubscriberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorSubscriberPreferredInsert", vendorIDParameter, subscriberIDParameter);
        }
    
        public virtual int VendorUpdate2(Nullable<int> vendorID, string vendorName, string address1, string address2, string address3, string city, string state, string zipcode, string country, string phone)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var address3Parameter = address3 != null ?
                new ObjectParameter("Address3", address3) :
                new ObjectParameter("Address3", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipcodeParameter = zipcode != null ?
                new ObjectParameter("Zipcode", zipcode) :
                new ObjectParameter("Zipcode", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorUpdate2", vendorIDParameter, vendorNameParameter, address1Parameter, address2Parameter, address3Parameter, cityParameter, stateParameter, zipcodeParameter, countryParameter, phoneParameter);
        }
    
        public virtual int VendorUpdateAddress2(Nullable<int> vendorID, string address1, string address2, string address3, string city, string state, string zipcode, string country, string phone)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var address3Parameter = address3 != null ?
                new ObjectParameter("Address3", address3) :
                new ObjectParameter("Address3", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipcodeParameter = zipcode != null ?
                new ObjectParameter("Zipcode", zipcode) :
                new ObjectParameter("Zipcode", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorUpdateAddress2", vendorIDParameter, address1Parameter, address2Parameter, address3Parameter, cityParameter, stateParameter, zipcodeParameter, countryParameter, phoneParameter);
        }
    
        public virtual int VendorUpdateGeneral(Nullable<int> vendorID, string websiteURL, string defaultCurrency)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var websiteURLParameter = websiteURL != null ?
                new ObjectParameter("WebsiteURL", websiteURL) :
                new ObjectParameter("WebsiteURL", typeof(string));
    
            var defaultCurrencyParameter = defaultCurrency != null ?
                new ObjectParameter("DefaultCurrency", defaultCurrency) :
                new ObjectParameter("DefaultCurrency", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorUpdateGeneral", vendorIDParameter, websiteURLParameter, defaultCurrencyParameter);
        }
    
        public virtual int VendorUpdateLogos(Nullable<int> vendorID, string companyLogoSmall, string companyLogoLarge)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var companyLogoSmallParameter = companyLogoSmall != null ?
                new ObjectParameter("CompanyLogoSmall", companyLogoSmall) :
                new ObjectParameter("CompanyLogoSmall", typeof(string));
    
            var companyLogoLargeParameter = companyLogoLarge != null ?
                new ObjectParameter("CompanyLogoLarge", companyLogoLarge) :
                new ObjectParameter("CompanyLogoLarge", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorUpdateLogos", vendorIDParameter, companyLogoSmallParameter, companyLogoLargeParameter);
        }
    
        public virtual int VendorUpdateOEM(Nullable<int> vendorID, Nullable<bool> oem, Nullable<bool> oemExclusive, Nullable<bool> oemRequiresRMA)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var oemParameter = oem.HasValue ?
                new ObjectParameter("oem", oem) :
                new ObjectParameter("oem", typeof(bool));
    
            var oemExclusiveParameter = oemExclusive.HasValue ?
                new ObjectParameter("oemExclusive", oemExclusive) :
                new ObjectParameter("oemExclusive", typeof(bool));
    
            var oemRequiresRMAParameter = oemRequiresRMA.HasValue ?
                new ObjectParameter("oemRequiresRMA", oemRequiresRMA) :
                new ObjectParameter("oemRequiresRMA", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorUpdateOEM", vendorIDParameter, oemParameter, oemExclusiveParameter, oemRequiresRMAParameter);
        }
    
        public virtual int VendorUpdateRFQPrefs(Nullable<int> vendorID, string rfqPhone, string rfqEmail, string rfqWebEmails, string rfqFax)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var rfqPhoneParameter = rfqPhone != null ?
                new ObjectParameter("rfqPhone", rfqPhone) :
                new ObjectParameter("rfqPhone", typeof(string));
    
            var rfqEmailParameter = rfqEmail != null ?
                new ObjectParameter("rfqEmail", rfqEmail) :
                new ObjectParameter("rfqEmail", typeof(string));
    
            var rfqWebEmailsParameter = rfqWebEmails != null ?
                new ObjectParameter("rfqWebEmails", rfqWebEmails) :
                new ObjectParameter("rfqWebEmails", typeof(string));
    
            var rfqFaxParameter = rfqFax != null ?
                new ObjectParameter("rfqFax", rfqFax) :
                new ObjectParameter("rfqFax", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorUpdateRFQPrefs", vendorIDParameter, rfqPhoneParameter, rfqEmailParameter, rfqWebEmailsParameter, rfqFaxParameter);
        }
    
        public virtual int VendorUpdateStats(Nullable<int> vendorID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorUpdateStats", vendorIDParameter);
        }
    
        public virtual int VendorUpdateStatus3(Nullable<int> vendorID, Nullable<int> statusID)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorUpdateStatus3", vendorIDParameter, statusIDParameter);
        }
    
        public virtual int VendorUpdateStatusAndNotes(Nullable<int> vendorID, Nullable<int> statusID, Nullable<bool> muted, string notes)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var mutedParameter = muted.HasValue ?
                new ObjectParameter("Muted", muted) :
                new ObjectParameter("Muted", typeof(bool));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorUpdateStatusAndNotes", vendorIDParameter, statusIDParameter, mutedParameter, notesParameter);
        }
    
        public virtual int VendorUpdateStatusAndNotes2(Nullable<int> vendorID, string vendorName, Nullable<int> statusID, Nullable<bool> muted, string notes)
        {
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            var vendorNameParameter = vendorName != null ?
                new ObjectParameter("VendorName", vendorName) :
                new ObjectParameter("VendorName", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var mutedParameter = muted.HasValue ?
                new ObjectParameter("Muted", muted) :
                new ObjectParameter("Muted", typeof(bool));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("VendorUpdateStatusAndNotes2", vendorIDParameter, vendorNameParameter, statusIDParameter, mutedParameter, notesParameter);
        }
    }
}
